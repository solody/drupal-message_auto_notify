<?php

/**
 * @file
 * Contains message_auto_notify.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\message_notify\Plugin\Notifier\Manager;
use Drupal\user\RoleInterface;

/**
 * Implements hook_help().
 */
function message_auto_notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the message_auto_notify module.
    case 'help.page.message_auto_notify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function message_auto_notify_theme() {
  return [
    'message_auto_notify' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_install().
 */
function message_auto_notify_install() {

  // 为已认证用户添加权限
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, [
    'restful patch message_auto_notify_user_notify_setting',
    'restful get message_auto_notify_user_notify_setting'
  ]);
}

/**
 * Implements hook_entity_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws Exception
 */
function message_auto_notify_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof \Drupal\message\Entity\Message) {
    // 使用自动发送配置发送消息
    /** @var \Drupal\message_auto_notify\Entity\Notification[] $notifications */
    $notifications = \Drupal\message_auto_notify\Entity\Notification::loadMultiple();
    /** @var Manager $notifierManager */
    $notifierManager = \Drupal::getContainer()->get('plugin.message_notify.notifier.manager');
    foreach ($notifications as $notification) {
      // 检查用户设置，如果用户关闭了通知则不发送
      /** @var \Drupal\message_auto_notify\UserNotifySettingManagerInterface $user_notify_setting_manager */
      $user_notify_setting_manager = \Drupal::service('message_auto_notify.user_notify_setting');
      $user_setting = $user_notify_setting_manager->getSetting($entity->getOwnerId());
      $user_closed_notify = false;
      if (isset($user_setting[$notification->id()]) && !$user_setting) $user_closed_notify = true;

      if (!$user_closed_notify &&
        $notification->getTemplate() === $entity->bundle() &&
        $notifierManager->hasDefinition($notification->getNotifier())) {
        /** @var \Drupal\message_notify\Plugin\Notifier\MessageNotifierInterface $notifier */
        $notifier = $notifierManager->createInstance($notification->getNotifier(), [
          'notification' => $notification
        ], $entity);
        $notifier->send();
      }
    }
  }
}


/**
 * Implements hook_entity_base_field_info().
 */
function message_auto_notify_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'message') {
    $fields['message_link'] = BaseFieldDefinition::create('string')
      ->setLabel(t('消息关联的内容链接'))
      ->setDefaultValue('')
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'string'
      ])
      ->setDisplayOptions('form', [
        'type' => 'string_textfield'
      ])
      ->setDisplayConfigurable('view', true)
      ->setDisplayConfigurable('form', true);
  }

  return $fields;
}